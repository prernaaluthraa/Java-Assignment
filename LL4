class GFG 
{ 
  
// Node ure  
static class Node  
{  
  
    int value;  
    Node next;  
};  
  
// Class to represent a node  
// of the linked list  
static class LinkedList  
{  
    Node head, mid;  
    int count;  
  
  
LinkedList()  
{  
    head = null;  
    mid = null;  
    count = 0;  
}  
  
// Function to insert a node in  
// the middle of the linked list  
void insertAtMiddle(int n)  
{  
  
    Node temp = new Node();  
    Node temp1;  
  
    temp.next = null;  
    temp.value = n;  
  
    // If the number of elements  
    // already present are less than 2  
    if (count < 2)  
    {  
        if (head == null)  
        {  
            head = temp;  
        }  
        else 
        {  
            temp1 = head;  
            temp1.next = temp;  
        }  
        count++;  
  
        // mid points to first element  
        mid = head;  
    }  
  
    // If the number of elements already present  
    // are greater than 2  
    else 
    {  
  
        temp.next = mid.next;  
        mid.next = temp;  
        count++;  
  
        // If number of elements after insertion  
        // are odd  
        if (count % 2 != 0)  
        {  
  
            // mid points to the newly  
            // inserted node  
            mid = mid.next;  
        }  
    }  
}  
  
// Function to print the nodes  
// of the linked list  
void show()  
{  
  
    Node temp;  
  
    temp = head;  
  
    // Initializing temp to head  
    // Iterating and printing till  
    // The end of linked list  
    // That is, till temp is null  
    while (temp != null)  
    {  
  
        System.out.print( temp.value + " -> ");  
        temp = temp.next;  
    }  
    System.out.print( "null");  
    System.out.println(); 
}  
  
} 
  
// Driver code  
public static void main(String args[]) 
{  
    // Elements to be inserted one after another  
    int arr[] = { 1, 2, 3, 4, 5 };  
    int n = arr.length;  
  
    LinkedList L1=new LinkedList();  
  
    // Insert the elements  
    for (int i = 0; i < n; i++)  
        L1.insertAtMiddle(arr[i]);  
  
    // Print the nodes of the linked list  
    L1.show();  
} 
} 
